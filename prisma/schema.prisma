generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  email    String  @unique
  password String
  avatar   String?

  isConfirmed    Boolean @default(false) @map("is_confirmed")
  activationCode Int     @map("activation_code")

  folders     Folder[]
  files       File[]
  sharedFiles SharedFile[]

  capacity  BigInt @default(5368709120)
  usedSpace BigInt @default(0) @map("used_space")
  freeSpace BigInt @default(5368709120) @map("free_space")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated")

  @@map("users")
}

model Folder {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  name  String
  color String
  size  BigInt @default(0)

  files File[]

  parent   Folder?  @relation("folder_to_folder", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?  @map("parent_id")
  children Folder[] @relation("folder_to_folder")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("folders")
}

model File {
  id String @id @default(uuid())

  name         String @unique
  displayName  String @map("display_name")
  originalName String @map("original_name")

  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String @map("folder_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @map("user_id")

  size         BigInt
  mimeType     String  @map("mime_type")
  resolvedType String  @map("resolved_type")
  isShared     Boolean @default(false) @map("is_shared")

  shared SharedFile[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}

model SharedFile {
  id String @id @default(uuid())

  fileId String @map("file_id")
  userId String @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  link String @unique @default(uuid())

  sharedAt DateTime @default(now()) @map("shared_at")

  @@unique([fileId, userId])
  @@map("shared_files")
}
